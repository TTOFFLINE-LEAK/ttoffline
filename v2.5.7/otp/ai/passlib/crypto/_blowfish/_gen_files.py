import os, textwrap
from otp.ai.passlib.utils.compat import irange

def varlist(name, count):
    return (', ').join(name + str(x) for x in irange(count))


def indent_block(block, padding):
    lines = block.split('\n')
    return ('\n').join((padding + line if line else '') for line in lines)


BFSTR = ('                ((((S0[l >> 24] + S1[(l >> 16) & 0xff]) ^ S2[(l >> 8) & 0xff]) +\n                  S3[l & 0xff]) & 0xffffffff)\n').strip()

def render_encipher(write, indent=0):
    for i in irange(0, 15, 2):
        write(indent, '            # Feistel substitution on left word (round %(i)d)\n            r ^= %(left)s ^ p%(i1)d\n\n            # Feistel substitution on right word (round %(i1)d)\n            l ^= %(right)s ^ p%(i2)d\n        ', i=i, i1=i + 1, i2=i + 2, left=BFSTR, right=BFSTR.replace('l', 'r'))


def write_encipher_function(write, indent=0):
    write(indent, '        def encipher(self, l, r):\n            """blowfish encipher a single 64-bit block encoded as two 32-bit ints"""\n\n            (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9,\n              p10, p11, p12, p13, p14, p15, p16, p17) = self.P\n            S0, S1, S2, S3 = self.S\n\n            l ^= p0\n\n            ')
    render_encipher(write, indent + 1)
    write(indent + 1, '\n        return r ^ p17, l\n\n        ')


def write_expand_function(write, indent=0):
    write(indent, '        def expand(self, key_words):\n            """unrolled version of blowfish key expansion"""\n            ##assert len(key_words) >= 18, "size of key_words must be >= 18"\n\n            P, S = self.P, self.S\n            S0, S1, S2, S3 = S\n\n            #=============================================================\n            # integrate key\n            #=============================================================\n        ')
    for i in irange(18):
        write(indent + 1, '            p%(i)d = P[%(i)d] ^ key_words[%(i)d]\n        ', i=i)

    write(indent + 1, '\n        #=============================================================\n        # update P\n        #=============================================================\n\n        #------------------------------------------------\n        # update P[0] and P[1]\n        #------------------------------------------------\n        l, r = p0, 0\n\n        ')
    render_encipher(write, indent + 1)
    write(indent + 1, '\n        p0, p1 = l, r = r ^ p17, l\n\n        ')
    for i in irange(2, 18, 2):
        write(indent + 1, '            #------------------------------------------------\n            # update P[%(i)d] and P[%(i1)d]\n            #------------------------------------------------\n            l ^= p0\n\n            ', i=i, i1=i + 1)
        render_encipher(write, indent + 1)
        write(indent + 1, '            p%(i)d, p%(i1)d = l, r = r ^ p17, l\n\n            ', i=i, i1=i + 1)

    write(indent + 1, '\n        #------------------------------------------------\n        # save changes to original P array\n        #------------------------------------------------\n        P[:] = (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9,\n          p10, p11, p12, p13, p14, p15, p16, p17)\n\n        #=============================================================\n        # update S\n        #=============================================================\n\n        for box in S:\n            j = 0\n            while j < 256:\n                l ^= p0\n\n        ')
    render_encipher(write, indent + 3)
    write(indent + 3, '\n                box[j], box[j+1] = l, r = r ^ p17, l\n                j += 2\n        ')


def main():
    target = os.path.join(os.path.dirname(__file__), 'unrolled.py')
    fh = file(target, 'w')

    def write(indent, msg, **kwds):
        literal = kwds.pop('literal', False)
        if kwds:
            msg %= kwds
        if not literal:
            msg = textwrap.dedent(msg.rstrip(' '))
        if indent:
            msg = indent_block(msg, ' ' * (indent * 4))
        fh.write(msg)

    write(0, '        """passlib.crypto._blowfish.unrolled - unrolled loop implementation of bcrypt,\n        autogenerated by _gen_files.py\n\n        currently this override the encipher() and expand() methods\n        with optimized versions, and leaves the other base.py methods alone.\n        """\n        #=================================================================\n        # imports\n        #=================================================================\n        # pkg\n        from otp.ai.passlib.crypto._blowfish.base import BlowfishEngine as _BlowfishEngine\n        # local\n        __all__ = [\n            "BlowfishEngine",\n        ]\n        #=================================================================\n        #\n        #=================================================================\n        class BlowfishEngine(_BlowfishEngine):\n\n        ')
    write_encipher_function(write, indent=1)
    write_expand_function(write, indent=1)
    write(0, '            #=================================================================\n            # eoc\n            #=================================================================\n\n        #=================================================================\n        # eof\n        #=================================================================\n        ')


if __name__ == '__main__':
    main()